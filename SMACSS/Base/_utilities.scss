//Import fonts if they are defined in the config file
@if variable-exists(font-url) {
  @import url($font-url);
}

/********Functions***********/
//Pixels to em function ($base__font-size must be set in config)
@function em($target, $context: $base__font-size) {
  @return ($target / $context) * 1em;
}

//Function for getting specific shades from the color palette defined in config
@function palette($palette, $shade: base) {
  @return map-get(map-get($palettes, $palette), $shade); 
}

//Function to set the context width for the grid
@function g-context($g-col-width, $g-col-count, $g-gutter-width) {
  $g-context: ($g-col-width * $g-col-count) + ($g-gutter-width * ($g-col-count - 1));
  @return $g-context;
}


/*********Mixins*********/
//Mixin for defining background colors for UI elements
//USAGE: add to a css rule to apply generate classes for every color in the given map
@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

//Mixin for background images.  $img is the file name, $path--rel must be defined in config ('../img' by default)
@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  width: $w;
  height: $h;
  display: $disp;
}

//Mixin for creating psuedo element shapes. Takes additional content.
@mixin p-el($el, $el-w: null, $el-h: null) {
  @if $el == "before" or $el == "after" {
    &:#{el} {
      @extend %psuedos;
      width: $el-w;
      height: $el-h;
      @content;
    }
  }
  @else {
    @warn "#{el} is not a valid pseudo-element.";
    @error "#{el} is not a valid pseudo-element.";
  }
}

//Adjacent sibling margins
@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

//Helper Mixins for quickly creating BEM rules
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

//Media Query Mixin
@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;  
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "Media Query (mq): No value could be retrieved for #{$break}."
  }
}

// Grid columns
@mixin g-columns {
    @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    //Generate column modifier class
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}